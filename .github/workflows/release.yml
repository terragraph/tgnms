name: RELEASE

on:
  push:
    branches:
    - main
    - 'releases/**'
  pull_request:
    branches:
    - main
    - 'releases/**'
  schedule:
    - cron: "0 0 * * *"

jobs:
  build:
    strategy:
      matrix:
        python-version: [3.8.12]
    runs-on: ubuntu-latest

    env:
      DOCKER_REGISTRY: ghcr.io
      DOCKER_USERNAME: ${{ github.actor }}
      DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_BRANCH: ${{ github.ref }}
      GITHUB_USER: ${{ github.actor }}
      GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Switch to Current Branch
        run: git checkout ${{ env.BRANCH }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd jenkins_scripts
          pip install -r requirements.txt
      - name: Set environment variables
        run: |
          echo "GIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "$GIT_BRANCH"

      - name: Release
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/releases'
        run: |
          BUILD_TAG=$(python jenkins_scripts/github_release.py get-tag -b ${{ env.GITHUB_BRANCH }})
          cd nms_stack
          ANSIBLE_VERSION=2.9.9
          OUTPUT_FILE="nms.pex"
          SYMLINK="nms"

          # Construct version file
          echo "The build tag is: ${BUILD_TAG}"
          echo "${BUILD_TAG}" > nms_cli/__version__

          # push versions to console for debugging
          echo "Packages"
          pip freeze
          pex --version

          # build nms dist
          echo "build nms dist"
          python setup.py bdist_wheel

          # build pex
          echo "Build pex"
          pex --wheel --python=python3 -v --disable-cache -f dist -f . ansible==$ANSIBLE_VERSION -e nms_cli.main -o ${OUTPUT_FILE} .

          # pex sanity test
          echo "pex sanity test"
          ls -lah ${OUTPUT_FILE}
          ./${OUTPUT_FILE} --version

          NOW=$(date +"%m_%d_%y_%H_%M_%S")
          DATED_FILE="/tmp/nms_${NOW}"
          mv ${OUTPUT_FILE} ${DATED_FILE}
          rm -f ${SYMLINK}
          ln -s ${DATED_FILE} ${SYMLINK}
          echo "Check if all required images have been created:"

          # TODO REMOVE THE NONFATAL IMAGE CHECK BEFORE RELEASE
          if ./nms check-images --nonfatal-image-check
          then
          echo 'IMAGES READY; STARTING RELEASE'
          # tag this build on github
          # python ../jenkins_scripts/github_release.py tag -b ${{ env.GITHUB_BRANCH }}
          # we pause for 10 seconds to let github catch up before we release.
          sleep 30
          # release command expects the GITHUB_USER and GITHUB_ACCESS_TOKEN env to be defined
          python ../jenkins_scripts/github_release.py release -a $(realpath nms) -n nms --tag ${BUILD_TAG}
          else
          echo 'IMAGES NOT READY; ABORTING RELEASE'
          fi
